{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport Markdown from 'react-markdown/with-html';\nimport Layout from '../../components/MyLayout';\nimport CommentSection from '../../components/CommentSection';\n\nvar Post = function Post(props) {\n  var article = props.article;\n  return __jsx(Layout, null, __jsx(\"h1\", {\n    className: \"jsx-1663814348\"\n  }, article.title), __jsx(\"h2\", {\n    className: \"jsx-1663814348\"\n  }, \"Author: \", article.by), __jsx(\"h3\", {\n    className: \"jsx-1663814348\"\n  }, \"Score: \", article.score), article.url && __jsx(\"h3\", {\n    className: \"jsx-1663814348\"\n  }, \"Link:\", ' ', __jsx(\"a\", {\n    href: \"\".concat(article.url),\n    target: \"_blank\",\n    className: \"jsx-1663814348\"\n  }, article.url)), article.text !== undefined && __jsx(React.Fragment, null, __jsx(\"h3\", {\n    className: \"jsx-1663814348\"\n  }, \"Post:\"), __jsx(Markdown, {\n    source: article.text,\n    escapeHtml: false\n  })), article.descendants > 0 && __jsx(CommentSection, {\n    collapsibleName: \"Comments\",\n    commentIDs: article.kids || []\n  }), __jsx(_JSXStyle, {\n    id: \"1663814348\"\n  }, [\".markdown{font-family:'Arial';}\", \".markdown a{-webkit-text-decoration:none;text-decoration:none;color:blue;}\", \".markdown a:hover{opacity:0.6;}\", \".markdown h3{margin:0;padding:0;text-transform:uppercase;}\", \"h1,h2,h3,p{font-family:'Arial';}\", \"p{line-height:1.3rem;}\"]));\n};\n\nPost.getInitialProps = function _callee(_ref) {\n  var query, id, article;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          query = _ref.query;\n          id = query.id;\n          console.log(id);\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(fetch(\"https://hacker-news.firebaseio.com/v0/item/\".concat(id, \".json?print=pretty\")).then(function (res) {\n            return res.json();\n          })[\"catch\"](function (e) {\n            return console.log(e);\n          }));\n\n        case 5:\n          article = _context.sent;\n          return _context.abrupt(\"return\", _Object$assign({}, {\n            article: article\n          }));\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, _Promise);\n};\n\nexport default Post;","map":null,"metadata":{},"sourceType":"module"}